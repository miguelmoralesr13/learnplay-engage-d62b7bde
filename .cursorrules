# .cursorrules

# Rules for Game Development in the Project

## SOLID Principles
1. **Single Responsibility Principle (SRP)**:
   - Each component or module should have a single responsibility.
   - Example: The `GameWrapper` component should only handle the game lifecycle, not the specific game logic.

2. **Open/Closed Principle (OCP)**:
   - Components should be open for extension but closed for modification.
   - Example: To add a new game type, extend the `IGame` interface instead of modifying existing code.

3. **Liskov Substitution Principle (LSP)**:
   - Derived classes should be substitutable for their base classes without altering the program's behavior.
   - Example: All games implementing `IGame` should be usable anywhere an `IGame` object is expected.

4. **Interface Segregation Principle (ISP)**:
   - Interfaces should be specific to each client, avoiding overly large interfaces.
   - Example: If a game does not need audio functionalities, it should not implement audio-related methods.

5. **Dependency Inversion Principle (DIP)**:
   - High-level modules should not depend on low-level modules; both should depend on abstractions.
   - Example: The `GameStore` should depend on the `IGame` interface rather than concrete game implementations.

## Best Practices

### File Structure
- **Organization**: Follow the directory structure defined in `src/games/[GameName]/`.
- **File Naming**: Use descriptive and consistent file names (e.g., `index.tsx`, `config.ts`, `types.ts`).

### Components
- **Reusability**: Use base components like `/src/components/game/GameWrapper`, `/src/components/game/ParametersForm`, `/src/components/game/InstructionsPanel`, and `/src/components/game/FeedbackDisplay` to avoid code duplication.
- **Props**: Clearly define component props using TypeScript to improve code safety and readability.
### libs
- **Reusability**: Use libraries such as `/src/lib/audioUtils`, `/src/lib/textToSpeech`, `/src/lib/speech/speechRecognizer`, `/src/lib/speech/visualizerHelper`, and `/src/lib/speech/speechRecognizer` to avoid code duplication when working with audio or speech recognition.
- **Placement**: Place reusable files in the `/src/lib/` directory so they are easily accessible from anywhere in the project.


### State Management
- **State Management**: Use Zustand to manage global game state. Avoid excessive use of local state in components.
- **Actions**: Define clear and specific actions in the store to modify the state.

### Testing
- **Unit Tests**: Write unit tests for each component and hook.
- **Integration Tests**: Ensure that components work correctly together.

### Documentation
- **Comments**: Document the code with clear and concise comments.
- **README**: Include a `README.md` file in each game directory explaining its functionality and how to use it.

### Performance
- **Lazy Loading**: Use lazy loading to load components and resources only when needed.
- **Optimization**: Optimize performance by avoiding unnecessary renders and using memoization where appropriate.

### Accessibility
- **Accessibility**: Ensure all components are accessible, including keyboard and screen reader support.
- **Themes**: Use `next-themes` to support light and dark themes.

## Creating a New Game

### Steps to Add a New Game
1. **Create a New Directory**:
   - Create a new directory under `src/games/[GameName]/`.

2. **Implement the `IGame` Interface**:
   - Implement the `IGame` interface in the new game.

3. **Create Specific Components**:
   - Create game-specific components in the `components/` directory.

4. **Register the Game**:
   - Register the game in the store using the `metadata.ts` file and the `useGameRegistry` hook.

5. **Add Routes**:
   - Add a route for the new game in `App.tsx`.

### Example Directory Structure